<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Growguard Dashboard (Dave)</title>
    <link rel="icon" href="data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22><text y=%22.9em%22 font-size=%2290%22>ü™¥</text></svg>">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-MrcW6ZMFYlzcLA8Nl+NtUVF0sA7MsXsP1UyJoMp4YLEuNSfAP+JcXn/tWtIaxVXM"
        crossorigin="anonymous"></script>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
</head>

<body>
    <div id="navbar">
        <p class="m-0" id="logo">Growguard Dashboard</p>
        <p class="m-0" id="logout">Logout</p>
    </div>

    <div id="app-wrapper">
        <div class="row mx-0">
            <div class="col-md-6">
                <div class="d-flex align-items-center py-3">
                    <img src="/public/goofy-ahh-mascot.png" alt="" id="mascot">
                    <div class="p-3">
                        <h3 class="mb-0">Dave</h3>
                        <p class="text-secondary my-0">UUID: 2cf45b63-62bd-41a2-a43d-a45ad8eaad95</p>
                        <p class="text-secondary"><a href="#">Devices</a> / Dave</p>

                        <div id="battery">
                            <span>Online</span>
                        </div>
                    </div>
                </div>
            </div>

        </div>


        <div class="row p-3 mx-0 px-0">
            <div class="col-md-3">
                <div class="datatab">
                    <div class="d-flex justify-content-between">
                        <div class="datatab-data">
                            <p class="data-title">Sunlight</p>
                            <h2><b>{{weekData.sunlight.toFixed(2)}}</b> lux /s</h2>
                            <p class="small text-secondary">This week</p>
                        </div>

                        <img src="/public/sun.png" alt="" class="tab-icon">
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="datatab">
                    <div class="d-flex justify-content-between">
                        <div class="datatab-data">
                            <p class="data-title">Air Humidity</p>
                            <h2><b>{{parseFloat(weekData.air_humidity).toFixed(2)}}%</b> RH</h2>
                            <!-- <p class="small text-secondary m-0"><i>Relative Humidity</i></p> -->
                            <p class="small text-secondary">This week's Avg</p>
                        </div>

                        <img src="/public/water.png" alt="" class="tab-icon">
                    </div>
                </div>
                <p class="small text-secondary mt-1">üí≠ Your plant has the same relative humidity as the Amazon
                    Rainforest
                </p>
            </div>
            <div class="col-md-3">
                <div class="datatab">
                    <div class="d-flex justify-content-between">
                        <div class="datatab-data">
                            <p class="data-title">Soil Humidity</p>
                            <h2><b>{{((weekData.soil_moisture / 4500) * 100).toFixed(2)}}</b>%</h2>
                            <p class="small text-secondary">This week</p>
                        </div>

                        <img src="/public/soil.png" alt="" class="tab-icon">
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="datatab">
                    <div class="d-flex justify-content-between">
                        <div class="datatab-data">
                            <p class="data-title">Ambient temperature</p>
                            <h2><b>{{weekData.temperature.toFixed(2)}} C</b></h2>
                            <p class="small text-secondary">This week</p>
                        </div>

                        <img src="/public/therm.png" alt="" class="tab-icon">
                    </div>
                </div>
            </div>
        </div>

        <div class="row mx-0 p-2 px-0 mx-0 justify-content-center" id="graphs-row">
            <div class="col-lg-3">
                <h6>Light Readings üí°</h6>
                <canvas id="lightChart"></canvas>
            </div>
            <br>
            <div class="col-lg-3">
                <h6>temperature Readings üî•</h6>
                <canvas id="tempChart"></canvas>
            </div>
            <br>
            <div class="col-lg-3">
                <h6>Air Humidity Readings ‚òÅÔ∏è</h6>
                <canvas id="pressureChart"></canvas>
            </div>
            <div class="col-lg-3">
                <h6>Soil Humidity Readings üèãÔ∏è</h6>
                <canvas id="soilChart"></canvas>
            </div>
        </div>

        <br>

        <div class="row mx-0 align-items-center">
            <div class="col-md-4">
                <div class="p-3">
                    <h3>Plant Configuration</h3>
                    <p class="text-secondary">Set your plant's target metrics</p>
                    <div class="form-group">
                        <label for="">temperature</label>
                        <input type="text" class="form-control" placeholder="Celcius">
                    </div>
                    <div class="form-group">
                        <label for="">Soil Moisture</label>
                        <input type="text" class="form-control" placeholder="LOW | MEDIUM | HIGH">
                    </div>
                    <div class="form-group">
                        <label for="">Sunlight</label>
                        <input type="text" class="form-control" placeholder="LOW | MEDIUM | HIGH">
                    </div>
                    <div class="form-group mt-2">
                        <button class="btn btn-success">Update</button>
                    </div>

                    <code>
                        {{plantTargetMetrics}}
                    </code>
                </div>
            </div>

            <div class="col-md-4">
                <div style="display: flex; flex-direction: column; justify-content: center; align-items: center;">
                    <h3 class="text-center">Daily Growth Index</h3>
                    <div class="">
                        <canvas id="growthIndexChart"></canvas>
                    </div>
                    <h4 class="text-center"><span :style="'color: ' + getScoreColor()">{{plantTargetMetrics.index}}</span>/<span style="color: grey">100</span>
                    </h4>
                    <p>Your daily growth creates a score based on your plants metrics over the course of the day and
                        how they compare to your target evironment metrics. temperature, Light and humidity. The
                        closer to 100, the closer to a perfect score
                    </p>
                </div>

            </div>

            <div class="col-md-4">
                <canvas id="scatterChart"></canvas>
            </div>
        </div>

        <div class="row p-3 px-0 mx-0 d-none">
            <div class="col-md-6">
                <h4>Average Plant Readings</h4>

                <canvas id="averagesChart"></canvas>

            </div>

        </div>

    </div>

</body>

</html>

<script src="/modules/socket.io/client-dist/socket.io.js"></script>
<script src="/modules/axios/dist/axios.js"></script>
<script src="https://cdn.jsdelivr.net/npm/vue@2.7.14/dist/vue.js"></script>
<script src="https://rawgit.com/moment/moment/2.2.1/min/moment.min.js"></script>

<script>
    // mock ENUM
    const LEVELS = {
        LOW: 0,
        MEDIUM: 1,
        HIGH: 2,
    }

    var dailyGrowthIndex = 0;

    var growthIndexChart;

    new Vue({
        el: "#app-wrapper",
        data() {
            return {
                moment: moment, 
                weekData: {
                    sunlight: 0,
                    air_humidity: 0,
                    soil_moisture: 0,
                    temperature: 0,
                },
                // default
                plantTargetMetrics: {
                    temperature: 0,
                    soil_moisture: LEVELS.LOW, // LOW, MEDIUM, HIGH
                    sunlight: LEVELS.LOW,
                    index: 0,
                }
            }
        },

        async beforeMount() {
            this.getPastData();

            setInterval(this.getPastData, 5 * 1000)

            // fetch plant config data
            let plantConfig = await axios.get("/plantconfig");
            
            if (plantConfig.status !== 200) {
                alert("Failed to get plant config. Please refresh");
                return;
            }

            let {data} = plantConfig;

            this.plantTargetMetrics.sunlight = data.sunlight;
            this.plantTargetMetrics.soil_moisture = data.soil_moisture;
            this.plantTargetMetrics.temperature = data.temperature;
        },

        async mounted() {
            const socket = io();

            // fetch data
            let previousData = await axios.get("/previousData");

            if (previousData.status !== 200) {
                alert("Failed to fetch historical data");
            }

            let correlationData = await axios.get("/correlation");

            if (correlationData.status !== 200) {
                alert("Failed to fetch correlation data");
                console.log(correlationData.status)
                console.log(correlationData.data);
            } else {
                if (correlationData.data.length) {
                    // populate scatter graph
                    // console.log(correlationData.data);
                    let soil_moisture_x = correlationData.data.map(log => log.data.soil_analog);
                    let temperature_y = correlationData.data.map(log => parseFloat(log.data.temperature.toFixed(2)));

                    for (let i = 0; i < correlationData.data.length; i++) {
                        scatterChartData.data.datasets[0].data.push({
                            x: soil_moisture_x[i],
                            y: temperature_y[i]
                        })
                    };

                    scatterChartData.update();
                }
            }

            let prvData = previousData.data;

            if (prvData.length) {
                prvData.forEach(reading => {
                    lightChartData.data.datasets[0].data.push(reading.lightIntensity)
                    lightChartData.data.labels.push(`${new Date(reading.timestamp).getSeconds()}`);

                    tempChartData.data.datasets[0].data.push(reading.temperature)
                    tempChartData.data.labels.push(`${new Date(reading.timestamp).getSeconds()}`);

                    pressureChartData.data.datasets[0].data.push(reading.humidity)
                    pressureChartData.data.labels.push(`${new Date(reading.timestamp).getSeconds()}`);

                    soilChartData.data.datasets[0].data.push(reading.soil_analog)
                    soilChartData.data.labels.push(`${new Date(reading.timestamp).getSeconds()}`);

                    [lightChartData, tempChartData, pressureChartData, soilChartData].map(chart => {
                        chart.update();
                    })
                })
            }

            socket.on("event", d => {
                lightChartData.data.datasets[0].data.push(d.value.lightIntensity)
                lightChartData.data.labels.push(`${new Date(d.timestamp).getSeconds()}`);

                // if chart contains more than 20 readings, being to pop
                if (lightChartData.data.datasets[0].data.length > 20) {
                    lightChartData.data.datasets.forEach((dataset) => {
                        dataset.data.shift(); // Remove the first data point
                    });
                    lightChartData.data.labels.shift();
                }

                lightChartData.update();

                tempChartData.data.datasets[0].data.push(d.value.temperature)
                tempChartData.data.labels.push(`${new Date(d.timestamp).getSeconds()}`);

                // if chart contains more than 20 readings, being to pop
                if (tempChartData.data.datasets[0].data.length > 20) {
                    tempChartData.data.datasets.forEach((dataset) => {
                        dataset.data.shift(); // Remove the first data point
                    });
                    tempChartData.data.labels.shift();
                }

                tempChartData.update();

                pressureChartData.data.datasets[0].data.push(d.value.humidity)
                pressureChartData.data.labels.push(`${new Date(d.timestamp).getSeconds()}`);

                // if chart contains more than 20 readings, being to pop
                if (pressureChartData.data.datasets[0].data.length > 20) {
                    pressureChartData.data.datasets.forEach((dataset) => {
                        dataset.data.shift(); // Remove the first data point
                    });
                    pressureChartData.data.labels.shift();
                }

                pressureChartData.update();

                soilChartData.data.datasets[0].data.push(d.value.soil_analog)
                soilChartData.data.labels.push(`${new Date(d.timestamp).getSeconds()}`);

                // if chart contains more than 20 readings, being to pop
                if (soilChartData.data.datasets[0].data.length > 20) {
                    soilChartData.data.datasets.forEach((dataset) => {
                        dataset.data.shift(); // Remove the first data point
                    });
                    soilChartData.data.labels.shift();
                }

                soilChartData.update();


            })
        },

        methods: {
            getPastData() {
                axios.get("/historical").then(response => {
                    let {
                        temperature,
                        soil_moisture,
                        air_humidity,
                        sunlight

                    } = response.data.weekAggregate;

                    this.weekData.sunlight = sunlight;
                    this.weekData.soil_moisture = soil_moisture;
                    this.weekData.temperature = temperature;
                    this.weekData.air_humidity = air_humidity;

                    // filter the weeks db data to return just data from today
                    let dayData = response.data.weekRaw.filter(log => {
                        new Date(log.createdAt) > new Date(this.moment().startOf("day").valueOf())
                        return log;
                    });

                    // console.log(response.data)
                    let dayAggregate = dayData.reduce((all, log) => {
                        all.temperature += log.data.temperature,
                        all.soil_moisture += log.data.soil_analog, 
                        all.air_humidity += log.data.humidity, 
                        all.sunlight += log.data.lightIntensity

                        return all;
                    }, {
                        temperature: 0, 
                        soil_moisture: 0, 
                        air_humidity: 0, 
                        sunlight: 0
                    })

                    Object.keys(dayAggregate).map(key => {
                        dayAggregate[key] = dayAggregate[key] / dayData.length;
                    });

                    console.log(dayAggregate)

                    this.calculateDailyIndex(dayAggregate.temperature, dayAggregate.soil_moisture, dayAggregate.sunlight)

                });
            }, 

            /** 
             * Method calculates the daily growth score 
             * avgSoilMoisture argument is converted to a percentage. Sensor takes max reading of 4500
             * */
            calculateDailyIndex (avgTemperature, avgSoilMoisture, avgSunlight) {

                avgSoilMoisture = (avgSoilMoisture / 4500) * 100; // convert to %

                console.log({avgSoilMoisture})


                // retrieve these values from DB and store in state
                const targetTemperature = 25;       // degees C
                const targetMoisture = 40;          // percent RH
                const targetSunlight = 90;        // LUX

                const weightPerProperty = 1/3;

                const maxTemperatureDeviation = 2   // degrees C
                const maxMoistureDeviation = 5      // %
                const maxSunlightDeviation = 20     // LUX

                // temperatureScore = (maxDeviationTemperature - abs(targetTemperature - actualTemperature)) / maxDeviationTemperature * 100 * weightTemperature

                const tempScore = Math.max(
                    (maxTemperatureDeviation - Math.abs(targetTemperature - avgTemperature)) / maxTemperatureDeviation * 100 * weightPerProperty, 
                    0
                );
                const moistureScore = Math.max(
                    (maxMoistureDeviation - Math.abs(targetMoisture - avgSoilMoisture)) / maxMoistureDeviation * 100 * weightPerProperty,
                    0
                );
                const sunlightScore = Math.max(
                    (maxSunlightDeviation - Math.abs(targetSunlight - avgSunlight)) / maxSunlightDeviation * 100 * weightPerProperty, 
                    0
                )
                
                console.log(tempScore, moistureScore, sunlightScore)

                console.log(
                    Math.ceil(tempScore + moistureScore + sunlightScore)
                )

                this.plantTargetMetrics.index = Math.ceil(tempScore + moistureScore + sunlightScore)
                let dataset = [this.plantTargetMetrics.index, 100 - this.plantTargetMetrics.index]

                growthIndexChart.data.datasets[0].data = dataset;
                growthIndexChart.data.datasets[0].backgroundColor = [this.getScoreColor(), "Grey"];

                growthIndexChart.update();

            },

            getScoreColor () {
                return this.plantTargetMetrics.index <= 30 ? "Red" : (this.plantTargetMetrics.index > 30 && this.plantTargetMetrics.index <= 70 ? "Orange" : "Green")
            }
        }
    })
</script>

<script>
    

    // create charts
    const lightChartCtx = document.getElementById("lightChart").getContext("2d");
    const lightChartData = new Chart(lightChartCtx, {
        type: "line",
        data: {
            labels: [],
            datasets: [{
                label: "light readings",
                data: [],
                fill: false,
                borderColor: 'rgb(75, 192, 192)',
                tension: 0,
                animation: {
                    duration: 1000,
                }
            }]
        },
        options: {
            responsive: true,
        }
    })

    const tempChartCtx = document.getElementById("tempChart").getContext("2d");
    const tempChartData = new Chart(tempChartCtx, {
        type: "line",
        data: {
            labels: [],
            datasets: [{
                label: "temperature readings",
                data: [],
                fill: false,
                borderColor: '#ff6600',
                tension: 0,
                animation: {
                    duration: 1000,
                }
            }]
        }
    })

    const pressureChartCtx = document.getElementById("pressureChart").getContext("2d");
    const pressureChartData = new Chart(pressureChartCtx, {
        type: "line",
        data: {
            labels: [],
            datasets: [{
                label: "air humidity readings",
                data: [],
                fill: false,
                borderColor: '#33cc33',
                tension: 0,
                animation: {
                    duration: 1000,
                    easing: "linear"
                }
            }]
        }
    })

    const soilChartCtx = document.getElementById("soilChart").getContext("2d");
    const soilChartData = new Chart(soilChartCtx, {
        type: "line",
        data: {
            labels: [],
            datasets: [{
                label: "soil humidity readings",
                data: [],
                fill: false,
                borderColor: '#d2691e',
                tension: 0,
                animation: {
                    duration: 1000,
                    easing: "linear"
                }
            }]
        }
    })

    const averagesChartCtx = document.getElementById("averagesChart").getContext("2d");
    const averagesChartData = new Chart(averagesChartCtx, {
        type: 'bar',
        labels: "",
        data: {
            labels: ["Light", "temperature", "Humidity"],
            datasets: [{
                label: 'My First Dataset',
                data: [65, 59, 80, 81, 56, 55, 40],
                backgroundColor: [
                    'rgba(255, 99, 132, 0.2)',
                    'rgba(255, 159, 64, 0.2)',
                    'rgba(255, 205, 86, 0.2)',
                    'rgba(75, 192, 192, 0.2)',
                    'rgba(54, 162, 235, 0.2)',
                    'rgba(153, 102, 255, 0.2)',
                    'rgba(201, 203, 207, 0.2)'
                ],
                borderColor: [
                    'rgb(255, 99, 132)',
                    'rgb(255, 159, 64)',
                    'rgb(255, 205, 86)',
                    'rgb(75, 192, 192)',
                    'rgb(54, 162, 235)',
                    'rgb(153, 102, 255)',
                    'rgb(201, 203, 207)'
                ],
                borderWidth: 1
            }]
        },

        options: {
            scales: {
                y: {
                    beginAtZero: true
                }
            }
        },
    })

    var options = {
        type: 'doughnut',
        data: {
            labels: ["Plant Score"],
            datasets: [{
                label: 'Plant Score',
                data: [dailyGrowthIndex, 100],
                backgroundColor: ["Green", "Grey"]
            }]
        },
        options: {
            rotation: 270, // start angle in degrees
            circumference: 180, // sweep angle in degrees
            responsive: true,
        }
    }

    let growthIndexCtx = document.getElementById("growthIndexChart").getContext("2d");
    growthIndexChart = new Chart(growthIndexCtx, options);

    // scatter chart

    let scatterChartCtx = document.getElementById("scatterChart").getContext("2d");
    var scatterChartData = new Chart(scatterChartCtx, {
        type: 'scatter',
        data: {
            datasets: [{
                label: 'Temperature vs Soil Humidity',
                data: [],
                backgroundColor: 'rgba(255, 99, 132, 1)'
            }]
        },
        options: {
            scales: {
                x: {
                    type: 'linear',
                    position: 'bottom'
                }
            }
        }
        // options: {
        //     scales: {
        //         x: [{
        //             type: 'linear',
        //             position: 'bottom',
        //             scaleLabel: {
        //                 labelString: 'Temperature (¬∞C)',
        //                 display: true,
        //             }
        //         }],
        //         y: [{
        //             scaleLabel: {
        //                 labelString: 'Soil Humidity (%)',
        //                 display: true,
        //             }
        //         }]
        //     }
        // }
    });


</script>

<style>
    #navbar {
        width: 100%;
        min-height: 40px;
        background-color: #1a4f31;
        color: white;
        display: flex;
        align-items: center;
        justify-content: space-between;
    }

    #graphs-row {
        margin-top: 30px;
    }

    #navbar p {
        padding: 20px;
    }

    * {
        font-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;
    }

    .datatab {
        width: 100%;
        min-height: 50px;
        border: 1px solid lightgrey;
        padding: 5px 13px;
        background-color: white;
    }

    .datatab .data-title {
        margin-bottom: 3px;
    }

    .tab-icon {
        height: 100px;
        width: auto;
    }

    #battery {
        width: 100px;
        min-height: 20px;
        border-radius: 20px;
        background-color: green;
        color: white;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 0.9em;
    }

    body {
        /* background-color: #ededed; */
    }

    #mascot {
        width: auto;
        height: 140px;
        background-color: lightblue;
        border-radius: 50%;
        border: 1px solid lightgrey;
    }

    /* #8f9349b0 */
</style>